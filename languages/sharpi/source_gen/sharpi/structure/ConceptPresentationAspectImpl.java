package sharpi.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_API;
  private ConceptPresentation props_AbstractCommand;
  private ConceptPresentation props_AbstractHttpHeader;
  private ConceptPresentation props_AbstractMimeType;
  private ConceptPresentation props_CommandList;
  private ConceptPresentation props_ContentType;
  private ConceptPresentation props_Input;
  private ConceptPresentation props_JsonBody;
  private ConceptPresentation props_Output;
  private ConceptPresentation props_Route;
  private ConceptPresentation props_XmlBody;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.API:
        if (props_API == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Api");
          props_API = cpb.create();
        }
        return props_API;
      case LanguageConceptSwitch.AbstractCommand:
        if (props_AbstractCommand == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractCommand = cpb.create();
        }
        return props_AbstractCommand;
      case LanguageConceptSwitch.AbstractHttpHeader:
        if (props_AbstractHttpHeader == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AbstractHttpHeader");
          props_AbstractHttpHeader = cpb.create();
        }
        return props_AbstractHttpHeader;
      case LanguageConceptSwitch.AbstractMimeType:
        if (props_AbstractMimeType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AbstractMimeType");
          props_AbstractMimeType = cpb.create();
        }
        return props_AbstractMimeType;
      case LanguageConceptSwitch.CommandList:
        if (props_CommandList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CommandList");
          props_CommandList = cpb.create();
        }
        return props_CommandList;
      case LanguageConceptSwitch.ContentType:
        if (props_ContentType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("content-type");
          props_ContentType = cpb.create();
        }
        return props_ContentType;
      case LanguageConceptSwitch.Input:
        if (props_Input == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Input");
          props_Input = cpb.create();
        }
        return props_Input;
      case LanguageConceptSwitch.JsonBody:
        if (props_JsonBody == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("json");
          props_JsonBody = cpb.create();
        }
        return props_JsonBody;
      case LanguageConceptSwitch.Output:
        if (props_Output == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Output");
          props_Output = cpb.create();
        }
        return props_Output;
      case LanguageConceptSwitch.Route:
        if (props_Route == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("route");
          props_Route = cpb.create();
        }
        return props_Route;
      case LanguageConceptSwitch.XmlBody:
        if (props_XmlBody == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("xml");
          props_XmlBody = cpb.create();
        }
        return props_XmlBody;
    }
    return null;
  }
}
